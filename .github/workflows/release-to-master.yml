name: Release to Master

on:
  push:
    branches:
      - 'release/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  create-master-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from branch
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION=${{ github.event.inputs.version }}
          else
            BRANCH_NAME=${GITHUB_REF#refs/heads/release/}
            VERSION=${BRANCH_NAME#v}
          fi
          echo "VERSION=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Pull Request to master
        run: |
          VERSION=${{ steps.version.outputs.version }}
          TITLE="Release v${VERSION} to master"
          BODY="Automated PR for releasing version ${VERSION} to master"
          # Check if PR already exists
          PR_EXISTS=$(gh pr list --head release/v${VERSION} --base master --json number | jq -r '.[0].number')
          if [ "$PR_EXISTS" != "null" ] && [ -n "$PR_EXISTS" ]; then
            echo "PR #$PR_EXISTS already exists, closing it"
            gh pr close $PR_EXISTS --comment "Closing to create updated PR"
            # Wait for PR to be closed
            TIMEOUT=10
            COUNTER=0
            while [ $COUNTER -lt $TIMEOUT ]; do
              STATE=$(gh pr view $PR_EXISTS --json state -q .state)
              if [ "$STATE" = "CLOSED" ]; then
                echo "PR #$PR_EXISTS successfully closed"
                break
              fi
              echo "Waiting for PR #$PR_EXISTS to close... ($COUNTER/$TIMEOUT)"
              sleep 1
              COUNTER=$((COUNTER + 1))
            done
            if [ $COUNTER -eq $TIMEOUT ]; then
              echo "Timeout waiting for PR #$PR_EXISTS to close"
              exit 1
            fi
          fi
          gh pr create --base master --head release/v${VERSION} --title "${TITLE}" --body "${BODY}"
          PR_NUMBER=$(gh pr list --head release/v${VERSION} --base master --json number -q '.[0].number')
          gh pr merge $PR_NUMBER --merge --admin
          echo "Merged PR #$PR_NUMBER successfully"
          gh workflow run deploy-and-release.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
